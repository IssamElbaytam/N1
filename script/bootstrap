#!/usr/bin/env node
/* eslint global-require: 0 */
/* eslint quote-props: 0 */
const path = require('path');
const safeExec = require('./utils/child-process-wrapper.js').safeExec;

const electronNPMTargetEnv = {
  'npm_config_target': '1.4.1',
  'npm_config_arch': 'x64',
  'npm_config_target_arch': 'x64',
  'npm_config_disturl': 'https://atom.io/download/atom-shell',
  'npm_config_runtime': 'electron',
  'npm_config_build_from_source': true,
};

function runDevelopmentNPMInstall(callback) {
  safeExec('npm install', {
    cwd: path.resolve(__dirname, '..', 'build'),
    env: process.env,
  }, callback);
}

function runElectronNPMInstall(callback) {
  safeExec('npm install', {
    cwd: path.resolve(__dirname, '..'),
    env: Object.assign(process.env, electronNPMTargetEnv),
  }, callback);
}

function runElectronNPMDedupe(callback) {
  safeExec('npm dedupe', {
    cwd: path.resolve(__dirname, '..', 'build'),
    env: Object.assign(process.env, electronNPMTargetEnv),
  }, callback);
}

function installProResources() {
  const fs = require('fs-plus');
  const proDir = path.resolve(path.join('src', 'pro'))
  const canaryFileExists = fs.existsSync(path.join(proDir, "README.md"))
  if (!canaryFileExists) {
    console.log(`Could not find pro submodule at ${proDir}. Skipping...`)
    return;
  }

  const unlinkIfExistsSync = (p) => {
    try {
      if (fs.lstatSync(p)) {
        fs.removeSync(p);
      }
    } catch (err) {
      // totally fine, just a non-existent file
    }
  }

  // copy Arc Files
  fs.copySync(path.join(proDir, 'arc-N1'), '.')

  // copy Source Extensions
  unlinkIfExistsSync(path.join('src', 'error-logger-extensions'));
  fs.copySync(path.join(proDir, 'src'), 'src');

  // link Plugins
  for (const plugin of fs.readdirSync(path.join(proDir, 'packages'))) {
    const from = path.join(proDir, 'packages', plugin);
    const to = path.join(path.resolve('internal_packages'), plugin);
    unlinkIfExistsSync(to);
    fs.symlinkSync(from, to, 'dir');
  }
}

console.log("-- Running npm install for dev dependencies --")
runDevelopmentNPMInstall(() => {
  console.log("-- Running npm install for app / Electron dependencies --")
  runElectronNPMInstall(() => {
    console.log("-- Running npm dedupe for app / Electron dependencies --")
    runElectronNPMDedupe(() => {
      console.log("-- Linking Nylas submodule resources --")
      installProResources();
    });
  });
})
